name: CI/CD - Auth Service

on:
  push:
    branches: 
      - main
      - develop
    paths:
      - 'services/auth-service/**'
      - '.github/workflows/auth-service-ci-cd.yml'
  pull_request:
    branches: 
      - main
      - develop
    paths:
      - 'services/auth-service/**'

env:
  SERVICE_NAME: auth-service
  SERVICE_PATH: services/auth-service
  PYTHON_VERSION: '3.11'

jobs:
  # Stage 1: Lint - Check code quality
  lint:
    name: Lint Python Code
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python ${{ env.PYTHON_VERSION }}
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}
          cache: 'pip'
          cache-dependency-path: '${{ env.SERVICE_PATH }}/requirements.txt'

      - name: Install dependencies
        working-directory: ${{ env.SERVICE_PATH }}
        run: |
          python -m pip install --upgrade pip
          pip install flake8 black isort mypy
          pip install -r requirements.txt

      - name: Run Black (Code Formatter Check)
        working-directory: ${{ env.SERVICE_PATH }}
        run: black --check app/
        continue-on-error: true

      - name: Run isort (Import Sorting Check)
        working-directory: ${{ env.SERVICE_PATH }}
        run: isort --check-only app/
        continue-on-error: true

      - name: Run Flake8 (Linter)
        working-directory: ${{ env.SERVICE_PATH }}
        run: |
          # Stop the build if there are Python syntax errors or undefined names
          flake8 app/ --count --select=E9,F63,F7,F82 --show-source --statistics
          # Exit-zero treats all errors as warnings
          flake8 app/ --count --exit-zero --max-complexity=10 --max-line-length=127 --statistics

      - name: Run MyPy (Type Checking)
        working-directory: ${{ env.SERVICE_PATH }}
        run: mypy app/ --ignore-missing-imports
        continue-on-error: true

  # Stage 2: Test - Run unit and integration tests
  test:
    name: Run Tests
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: ['3.11', '3.12']
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.python-version }}
          cache: 'pip'
          cache-dependency-path: '${{ env.SERVICE_PATH }}/requirements.txt'

      - name: Install dependencies
        working-directory: ${{ env.SERVICE_PATH }}
        run: |
          python -m pip install --upgrade pip
          pip install pytest pytest-cov pytest-asyncio httpx
          pip install -r requirements.txt

      - name: Run Unit Tests with Coverage
        working-directory: ${{ env.SERVICE_PATH }}
        run: |
          pytest --cov=app --cov-report=xml --cov-report=html --cov-report=term -v
        env:
          DATABASE_URL: sqlite:///./test.db
          JWT_SECRET: test-secret-key-for-ci
          VAULT_ADDR: http://localhost:8200
          VAULT_TOKEN: test-token

      - name: Upload Coverage to Codecov
        uses: codecov/codecov-action@v5
        with:
          token: ${{ secrets.CODECOV_TOKEN }}
          files: ./${{ env.SERVICE_PATH }}/coverage.xml
          flags: auth-service
          name: auth-service-${{ matrix.python-version }}

      - name: Upload Coverage Reports
        uses: actions/upload-artifact@v4
        with:
          name: coverage-report-${{ matrix.python-version }}
          path: ${{ env.SERVICE_PATH }}/htmlcov/
          retention-days: 7

  # Stage 3: Security Scan
  security-scan:
    name: Security Scan
    runs-on: ubuntu-latest
    needs: [lint]
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python ${{ env.PYTHON_VERSION }}
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Install Safety
        run: pip install safety bandit

      - name: Run Safety (Dependency Vulnerability Check)
        working-directory: ${{ env.SERVICE_PATH }}
        run: safety check -r requirements.txt --json
        continue-on-error: true

      - name: Run Bandit (Security Linter)
        working-directory: ${{ env.SERVICE_PATH }}
        run: bandit -r app/ -f json -o bandit-report.json
        continue-on-error: true

      - name: Upload Security Reports
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: security-reports
          path: ${{ env.SERVICE_PATH }}/*-report.json
          retention-days: 30

  # Stage 4: Build Docker Image
  build:
    name: Build Docker Image
    runs-on: ubuntu-latest
    needs: [lint, test]
    if: github.event_name == 'push'
    outputs:
      image-tag: ${{ steps.meta.outputs.tags }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to Azure Container Registry
        uses: azure/docker-login@v1
        with:
          login-server: ${{ secrets.ACR_LOGIN_SERVER }}
          username: ${{ secrets.ACR_USERNAME }}
          password: ${{ secrets.ACR_PASSWORD }}

      - name: Extract metadata (tags, labels)
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ secrets.ACR_LOGIN_SERVER }}/${{ env.SERVICE_NAME }}
          tags: |
            type=ref,event=branch
            type=sha,prefix={{branch}}-
            type=raw,value=latest,enable={{is_default_branch}}

      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: ./${{ env.SERVICE_PATH }}
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          build-args: |
            BUILD_DATE=${{ github.event.head_commit.timestamp }}
            VCS_REF=${{ github.sha }}

      - name: Image digest
        run: echo ${{ steps.build.outputs.digest }}

  # Stage 5: Deploy to Azure (Development)
  deploy-dev:
    name: Deploy to Development
    runs-on: ubuntu-latest
    needs: [build, security-scan]
    if: github.ref == 'refs/heads/develop'
    environment:
      name: development
      url: https://dev-auth.qnt9-srs.azure.com
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Azure Login
        uses: azure/login@v1
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}

      - name: Get AKS Credentials
        run: |
          az aks get-credentials --resource-group rg-qnt9-srs-dev --name aks-qnt9-srs-dev --overwrite-existing

      - name: Deploy to AKS
        run: |
          kubectl set image deployment/${{ env.SERVICE_NAME }} \
            ${{ env.SERVICE_NAME }}=${{ secrets.ACR_LOGIN_SERVER }}/${{ env.SERVICE_NAME }}:develop-${{ github.sha }} \
            -n default || \
          kubectl create deployment ${{ env.SERVICE_NAME }} \
            --image=${{ secrets.ACR_LOGIN_SERVER }}/${{ env.SERVICE_NAME }}:develop-${{ github.sha }} \
            -n default

      - name: Verify Deployment
        run: |
          kubectl rollout status deployment/${{ env.SERVICE_NAME }} -n default --timeout=5m

  # Stage 6: Deploy to Azure (Staging)
  deploy-staging:
    name: Deploy to Staging
    runs-on: ubuntu-latest
    needs: [build, security-scan]
    if: github.ref == 'refs/heads/main'
    environment:
      name: staging
      url: https://staging-auth.qnt9-srs.azure.com
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Azure Login
        uses: azure/login@v1
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}

      - name: Get AKS Credentials
        run: |
          az aks get-credentials --resource-group rg-qnt9-srs-staging --name aks-qnt9-srs-staging --overwrite-existing

      - name: Deploy to AKS
        run: |
          kubectl set image deployment/${{ env.SERVICE_NAME }} \
            ${{ env.SERVICE_NAME }}=${{ secrets.ACR_LOGIN_SERVER }}/${{ env.SERVICE_NAME }}:main-${{ github.sha }} \
            -n default || \
          kubectl create deployment ${{ env.SERVICE_NAME }} \
            --image=${{ secrets.ACR_LOGIN_SERVER }}/${{ env.SERVICE_NAME }}:main-${{ github.sha }} \
            -n default

      - name: Verify Deployment
        run: |
          kubectl rollout status deployment/${{ env.SERVICE_NAME }} -n default --timeout=5m

      - name: Run Smoke Tests
        run: |
          echo "Running smoke tests for staging deployment..."
          # Add smoke test commands here

  # Stage 7: Notify
  notify:
    name: Notify on Completion
    runs-on: ubuntu-latest
    needs: [deploy-dev, deploy-staging]
    if: always()
    steps:
      - name: Notify Success
        if: needs.deploy-dev.result == 'success' || needs.deploy-staging.result == 'success'
        run: |
          echo "✅ Deployment successful!"
          echo "Service: ${{ env.SERVICE_NAME }}"
          echo "Environment: ${{ github.ref == 'refs/heads/develop' && 'Development' || 'Staging' }}"
          echo "Commit: ${{ github.sha }}"
          # Add Slack/Teams/Email notification here

      - name: Notify Failure
        if: needs.deploy-dev.result == 'failure' || needs.deploy-staging.result == 'failure'
        run: |
          echo "❌ Deployment failed!"
          echo "Service: ${{ env.SERVICE_NAME }}"
          echo "Check logs for details"
          # Add Slack/Teams/Email notification here
