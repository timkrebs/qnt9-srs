name: Python CI Pipeline

on:
  push:
    branches: [main, development, staging]
    paths:
      - 'services/**'
      - '.github/workflows/ci-python.yml'
  pull_request:
    branches: [main, development, staging]
    paths:
      - 'services/**'
      - '.github/workflows/ci-python.yml'

env:
  PYTHON_VERSION: "3.11"
  
permissions:
  contents: read
  pull-requests: write
  checks: write
  security-events: write

jobs:
  # Job 1: Detect which services changed
  detect-changes:
    name: Detect Changed Services
    runs-on: ubuntu-latest
    outputs:
      services: ${{ steps.filter.outputs.changes }}
      search-service: ${{ steps.filter.outputs.search-service }}
      frontend-service: ${{ steps.filter.outputs.frontend-service }}
      auth-service: ${{ steps.filter.outputs.auth-service }}
    steps:
      - uses: actions/checkout@v4
      
      - uses: dorny/paths-filter@v3
        id: filter
        with:
          filters: |
            search-service:
              - 'services/search-service/**'
            frontend-service:
              - 'services/frontend-service/**'
            auth-service:
              - 'services/auth-service/**'

  # Job 2: Lint & Static Analysis
  lint:
    name: Lint ${{ matrix.service }}
    runs-on: ubuntu-latest
    needs: detect-changes
    if: |
      needs.detect-changes.outputs.search-service == 'true' ||
      needs.detect-changes.outputs.frontend-service == 'true' ||
      needs.detect-changes.outputs.auth-service == 'true'
    
    strategy:
      fail-fast: false
      matrix:
        service:
          - search-service
          - frontend-service
          - auth-service
    
    steps:
      - uses: actions/checkout@v4
      
      - name: Set up Python ${{ env.PYTHON_VERSION }}
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}
          cache: 'pip'
          cache-dependency-path: 'services/${{ matrix.service }}/requirements.txt'
      
      - name: Install linting tools
        run: |
          python -m pip install --upgrade pip
          pip install black isort flake8 mypy pylint bandit ruff
      
      - name: Install service dependencies
        working-directory: services/${{ matrix.service }}
        run: |
          if [ -f "requirements.txt" ]; then
            pip install -r requirements.txt
          fi
      
      - name: Black code formatting check
        working-directory: services/${{ matrix.service }}
        run: black --check --line-length 100 app/ tests/
        continue-on-error: false
      
      - name: isort import sorting check
        working-directory: services/${{ matrix.service }}
        run: isort --check-only --profile black --line-length 100 app/ tests/
        continue-on-error: false
      
      - name: Ruff linting
        working-directory: services/${{ matrix.service }}
        run: ruff check app/ tests/
        continue-on-error: false
      
      - name: Flake8 linting
        working-directory: services/${{ matrix.service }}
        run: |
          flake8 app/ tests/ --count --select=E9,F63,F7,F82 --show-source --statistics
          flake8 app/ tests/ --count --exit-zero --max-complexity=10 --max-line-length=100 --statistics
        continue-on-error: true
      
      - name: Pylint analysis
        working-directory: services/${{ matrix.service }}
        run: |
          pylint app/ tests/ --exit-zero --score=y
        continue-on-error: true
      
      - name: Bandit security scan
        working-directory: services/${{ matrix.service }}
        run: |
          bandit -r app/ -ll -f sarif -o bandit-report.sarif || true
          bandit -r app/ -ll || true
        continue-on-error: true
      
      - name: Upload Bandit SARIF
        if: always()
        uses: github/codeql-action/upload-sarif@v3
        with:
          sarif_file: services/${{ matrix.service }}/bandit-report.sarif
          category: bandit-${{ matrix.service }}
        continue-on-error: true

  # Job 3: Run Tests (Native Python)
  test:
    name: Test ${{ matrix.service }}
    runs-on: ubuntu-latest
    needs: [detect-changes, lint]
    if: |
      needs.detect-changes.outputs.search-service == 'true' ||
      needs.detect-changes.outputs.frontend-service == 'true' ||
      needs.detect-changes.outputs.auth-service == 'true'
    
    strategy:
      fail-fast: false
      matrix:
        service:
          - search-service
          - frontend-service
          - auth-service
    
    steps:
      - uses: actions/checkout@v4
      
      - name: Set up Python ${{ env.PYTHON_VERSION }}
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}
          cache: 'pip'
          cache-dependency-path: 'services/${{ matrix.service }}/requirements.txt'
      
      - name: Install dependencies
        working-directory: services/${{ matrix.service }}
        run: |
          python -m pip install --upgrade pip
          if [ -f "requirements.txt" ]; then
            pip install -r requirements.txt
          fi
          pip install pytest pytest-cov pytest-asyncio httpx
      
      - name: Run pytest with coverage
        working-directory: services/${{ matrix.service }}
        env:
          USE_LOCAL_DB: true
          DATABASE_URL: sqlite:///./test.db
          VAULT_ADDR: http://localhost:8200
          VAULT_TOKEN: test-token
        run: |
          pytest -v \
            --cov=app \
            --cov-report=xml \
            --cov-report=term-missing \
            --cov-report=html \
            --junitxml=pytest-report.xml \
            --maxfail=10
      
      - name: Check coverage threshold
        working-directory: services/${{ matrix.service }}
        run: |
          if [ -f coverage.xml ]; then
            coverage_pct=$(python3 -c "import xml.etree.ElementTree as ET; tree = ET.parse('coverage.xml'); root = tree.getroot(); print(float(root.attrib['line-rate']) * 100)")
            echo "Coverage: ${coverage_pct}%"
            
            if (( $(echo "$coverage_pct < 70" | bc -l) )); then
              echo "ERROR: Coverage is below 70% (${coverage_pct}%)"
              exit 1
            elif (( $(echo "$coverage_pct >= 90" | bc -l) )); then
              echo "✓ Excellent! Coverage is ${coverage_pct}% (>= 90%)"
            elif (( $(echo "$coverage_pct >= 80" | bc -l) )); then
              echo "✓ Good! Coverage is ${coverage_pct}% (80-90%)"
            else
              echo "⚠ Coverage is ${coverage_pct}% (70-80%). Aim for 80%+"
            fi
          else
            echo "ERROR: No coverage.xml found"
            exit 1
          fi
      
      - name: Upload coverage to CodeCov
        uses: codecov/codecov-action@v4
        with:
          token: ${{ secrets.CODECOV_TOKEN }}
          files: services/${{ matrix.service }}/coverage.xml
          flags: ${{ matrix.service }}
          name: ${{ matrix.service }}-coverage
          fail_ci_if_error: false
          verbose: true
      
      - name: Upload test results
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: test-results-${{ matrix.service }}
          path: |
            services/${{ matrix.service }}/pytest-report.xml
            services/${{ matrix.service }}/coverage.xml
            services/${{ matrix.service }}/htmlcov/
          retention-days: 30

  # Job 4: Summary and reporting
  summary:
    name: Pipeline Summary
    runs-on: ubuntu-latest
    needs: [detect-changes, lint, test]
    if: always()
    
    steps:
      - name: Download all artifacts
        uses: actions/download-artifact@v4
        with:
          path: artifacts
        continue-on-error: true
      
      - name: Upload test results to Codecov
        if: ${{ !cancelled() }}
        uses: codecov/test-results-action@v1
        with:
          token: ${{ secrets.CODECOV_TOKEN }}
        continue-on-error: true
      
      - name: Generate summary
        run: |
          echo "# Python CI Pipeline Summary" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**Branch:** \`${{ github.ref_name }}\`" >> $GITHUB_STEP_SUMMARY
          echo "**Commit:** \`${{ github.sha }}\`" >> $GITHUB_STEP_SUMMARY
          echo "**Triggered by:** ${{ github.event_name }}" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          
          echo "## Changed Services" >> $GITHUB_STEP_SUMMARY
          echo "- **search-service**: ${{ needs.detect-changes.outputs.search-service == 'true' && '✓ Changed' || '- Skipped' }}" >> $GITHUB_STEP_SUMMARY
          echo "- **frontend-service**: ${{ needs.detect-changes.outputs.frontend-service == 'true' && '✓ Changed' || '- Skipped' }}" >> $GITHUB_STEP_SUMMARY
          echo "- **auth-service**: ${{ needs.detect-changes.outputs.auth-service == 'true' && '✓ Changed' || '- Skipped' }}" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          
          echo "## Pipeline Stages" >> $GITHUB_STEP_SUMMARY
          echo "| Stage | Status |" >> $GITHUB_STEP_SUMMARY
          echo "|-------|--------|" >> $GITHUB_STEP_SUMMARY
          echo "| Lint & Static Analysis | ${{ needs.lint.result == 'success' && '✓ PASSED' || needs.lint.result == 'skipped' && '- SKIPPED' || '✗ FAILED' }} |" >> $GITHUB_STEP_SUMMARY
          echo "| Tests & Coverage | ${{ needs.test.result == 'success' && '✓ PASSED' || needs.test.result == 'skipped' && '- SKIPPED' || '✗ FAILED' }} |" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          
          if [[ "${{ needs.test.result }}" == "success" ]]; then
            echo "### ✓ All tests passed with minimum 70% coverage requirement" >> $GITHUB_STEP_SUMMARY
          elif [[ "${{ needs.test.result }}" == "skipped" ]]; then
            echo "### Tests skipped (no changes detected)" >> $GITHUB_STEP_SUMMARY
          else
            echo "### ✗ Some tests failed. Check the logs above." >> $GITHUB_STEP_SUMMARY
          fi
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "---" >> $GITHUB_STEP_SUMMARY
          echo "*Next steps: Docker build and ACR deployment will be added in a future iteration*" >> $GITHUB_STEP_SUMMARY

