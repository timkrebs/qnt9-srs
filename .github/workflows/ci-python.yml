name: Python CI Pipeline

on:
  push:
    branches: [main, development, staging]
    paths:
      - 'services/**'
      - '.github/workflows/ci-python.yml'
  pull_request:
    branches: [main, development, staging]
    paths:
      - 'services/**'
      - '.github/workflows/ci-python.yml'

env:
  PYTHON_VERSION: "3.14"
  
permissions:
  contents: read
  pull-requests: write
  checks: write
  security-events: write

jobs:
  # Job 1: Detect which services changed
  detect-changes:
    name: Detect Changed Services
    runs-on: ubuntu-latest
    outputs:
      services: ${{ steps.filter.outputs.changes }}
      search-service: ${{ steps.filter.outputs.search-service }}
      frontend-service: ${{ steps.filter.outputs.frontend-service }}
    steps:
      - uses: actions/checkout@v4
      
      - uses: dorny/paths-filter@v3
        id: filter
        with:
          filters: |
            search-service:
              - 'services/search-service/**'
            frontend-service:
              - 'services/frontend-service/**'

  # Job 2: Lint & Format Check
  lint:
    name: Lint ${{ matrix.service }}
    runs-on: ubuntu-latest
    needs: detect-changes
    if: |
      needs.detect-changes.outputs.search-service == 'true' ||
      needs.detect-changes.outputs.frontend-service == 'true'
    
    strategy:
      fail-fast: false
      matrix:
        service:
          - search-service
          - frontend-service
    
    steps:
      - uses: actions/checkout@v4
      
      - name: Set up Python ${{ env.PYTHON_VERSION }}
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}
          cache: 'pip'
          cache-dependency-path: 'services/${{ matrix.service }}/requirements.txt'
      
      - name: Install linting tools
        run: |
          python -m pip install --upgrade pip
          pip install black isort flake8 mypy pylint bandit safety ruff
      
      - name: Install service dependencies
        working-directory: services/${{ matrix.service }}
        run: |
          if [ -f "requirements.txt" ]; then
            pip install -r requirements.txt
          fi
      
      - name: Black code formatting check
        working-directory: services/${{ matrix.service }}
        run: black --check --line-length 100 .
        continue-on-error: true
      
      - name: isort import sorting check
        working-directory: services/${{ matrix.service }}
        run: isort --check-only --profile black --line-length 100 .
        continue-on-error: true
      
      - name: Ruff linting
        working-directory: services/${{ matrix.service }}
        run: ruff check .
        continue-on-error: true
      
      - name: Flake8 linting
        working-directory: services/${{ matrix.service }}
        run: |
          flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics
          flake8 . --count --exit-zero --max-complexity=10 --max-line-length=100 --statistics
        continue-on-error: true
      
      - name: Pylint analysis
        working-directory: services/${{ matrix.service }}
        run: |
          pylint app/ --exit-zero --rcfile=../../.pylintrc --score=y
        continue-on-error: true
      
      - name: Bandit security scan
        working-directory: services/${{ matrix.service }}
        run: |
          bandit -r app/ -ll -f sarif -o bandit-report.sarif || true
          bandit -r app/ -ll || true
        continue-on-error: true
      
      - name: Upload Bandit SARIF
        if: always()
        uses: github/codeql-action/upload-sarif@v3
        with:
          sarif_file: services/${{ matrix.service }}/bandit-report.sarif
          category: bandit-${{ matrix.service }}
        continue-on-error: true

  # Job 3: Build Docker Image
  docker-build:
    name: Build Docker ${{ matrix.service }}
    runs-on: ubuntu-latest
    needs: [detect-changes, lint]
    if: |
      needs.detect-changes.outputs.search-service == 'true' ||
      needs.detect-changes.outputs.frontend-service == 'true'
    
    strategy:
      fail-fast: false
      matrix:
        service:
          - search-service
          - frontend-service
    
    steps:
      - uses: actions/checkout@v4
      
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
      
      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: qnt9srs/${{ matrix.service }}
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=sha,prefix={{branch}}-
            type=raw,value=latest,enable={{is_default_branch}}
      
      - name: Build Docker image
        uses: docker/build-push-action@v5
        with:
          context: services/${{ matrix.service }}
          push: false
          load: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          build-args: |
            BUILD_DATE=${{ github.event.head_commit.timestamp }}
            VCS_REF=${{ github.sha }}
            VERSION=${{ github.ref_name }}
      
      - name: Test Docker image
        run: |
          image_tag=$(echo "${{ steps.meta.outputs.tags }}" | head -n1)
          docker run --rm $image_tag python --version
      
      - name: Save Docker image
        run: |
          image_tag=$(echo "${{ steps.meta.outputs.tags }}" | head -n1)
          docker save $image_tag | gzip > /tmp/${{ matrix.service }}.tar.gz
      
      - name: Upload Docker image artifact
        uses: actions/upload-artifact@v4
        with:
          name: docker-${{ matrix.service }}
          path: /tmp/${{ matrix.service }}.tar.gz
          retention-days: 1

  # Job 4: Run Tests in Docker Container
  test-in-docker:
    name: Test in Docker ${{ matrix.service }}
    runs-on: ubuntu-latest
    needs: [detect-changes, docker-build]
    if: |
      needs.detect-changes.outputs.search-service == 'true' ||
      needs.detect-changes.outputs.frontend-service == 'true'
    
    strategy:
      fail-fast: false
      matrix:
        service:
          - search-service
          - frontend-service
    
    steps:
      - uses: actions/checkout@v4
      
      - name: Download Docker image
        uses: actions/download-artifact@v4
        with:
          name: docker-${{ matrix.service }}
          path: /tmp
      
      - name: Load Docker image
        run: docker load < /tmp/${{ matrix.service }}.tar.gz
      
      - name: Run tests inside Docker container
        run: |
          image_tag="qnt9srs/${{ matrix.service }}:${{ github.ref_name }}"
          
          # Run tests in container with SQLite test database
          docker run --rm \
            -v $(pwd)/services/${{ matrix.service }}:/app \
            -e USE_LOCAL_DB=true \
            -e DATABASE_URL=sqlite:///./test.db \
            -e VAULT_ADDR=http://localhost:8200 \
            -e VAULT_TOKEN=test-token \
            -w /app \
            $image_tag \
            sh -c "
              pip install --user pytest pytest-cov pytest-asyncio pytest-xdist &&
              export PATH=\"\$PATH:\$HOME/.local/bin\" &&
              pytest -v \
                --cov=app \
                --cov-report=xml:coverage.xml \
                --cov-report=term-missing \
                --cov-report=html:htmlcov \
                --junitxml=pytest-report.xml \
                --maxfail=10 \
                -n auto
            "
      
      - name: Extract coverage from container
        run: |
          # Coverage files are in mounted volume
          ls -la services/${{ matrix.service}}/
      
      - name: Check coverage threshold (80-90%)
        working-directory: services/${{ matrix.service }}
        run: |
          if [ -f coverage.xml ]; then
            coverage_pct=$(python3 -c "import xml.etree.ElementTree as ET; tree = ET.parse('coverage.xml'); root = tree.getroot(); print(float(root.attrib['line-rate']) * 100)")
            echo "Coverage: ${coverage_pct}%"
            
            if (( $(echo "$coverage_pct < 70" | bc -l) )); then
              echo "ERROR: Coverage is below 70% (${coverage_pct}%)"
              exit 1
            elif (( $(echo "$coverage_pct >= 90" | bc -l) )); then
              echo "Excellent! Coverage is ${coverage_pct}% (>= 90%)"
            elif (( $(echo "$coverage_pct >= 80" | bc -l) )); then
              echo "Good! Coverage is ${coverage_pct}% (80-90%)"
            else
              echo "WARNING: Coverage is ${coverage_pct}% (70-80%). Aim for 80%+"
            fi
          else
            echo "ERROR: No coverage.xml found"
            exit 1
          fi
      
      - name: Upload coverage to CodeCov
        uses: codecov/codecov-action@v4
        with:
          token: ${{ secrets.CODECOV_TOKEN }}
          files: services/${{ matrix.service }}/coverage.xml
          flags: ${{ matrix.service }}
          name: ${{ matrix.service }}-docker-coverage
          fail_ci_if_error: false
          verbose: true
      
      - name: Upload test results
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: test-results-${{ matrix.service }}-docker
          path: |
            services/${{ matrix.service }}/pytest-report.xml
            services/${{ matrix.service }}/coverage.xml
            services/${{ matrix.service }}/htmlcov/
          retention-days: 30

  # Job 5: Docker Scout vulnerability scanning
  docker-scout:
    name: Docker Scout Scan ${{ matrix.service }}
    runs-on: ubuntu-latest
    needs: [detect-changes, test-in-docker]
    if: |
      (needs.detect-changes.outputs.search-service == 'true' ||
       needs.detect-changes.outputs.frontend-service == 'true') &&
      github.event_name == 'push'
    
    strategy:
      fail-fast: false
      matrix:
        service:
          - search-service
          - frontend-service

    steps:
      - uses: actions/checkout@v4
      
      - name: Download Docker image
        uses: actions/download-artifact@v4
        with:
          name: docker-${{ matrix.service }}
          path: /tmp
      
      - name: Load Docker image
        run: docker load < /tmp/${{ matrix.service }}.tar.gz
      
      - name: Docker Scout scan
        uses: docker/scout-action@v1
        with:
          command: cves
          image: qnt9srs/${{ matrix.service }}:${{ github.ref_name }}
          only-severities: critical,high
          exit-code: false
          sarif-file: scout-${{ matrix.service }}.sarif
        continue-on-error: true
      
      - name: Upload Scout results to GitHub Security
        uses: github/codeql-action/upload-sarif@v3
        with:
          sarif_file: scout-${{ matrix.service }}.sarif
          category: docker-scout-${{ matrix.service }}
        continue-on-error: true

  # Job 6: Push to Azure Container Registry
  docker-push-acr:
    name: Push to ACR ${{ matrix.service }}
    runs-on: ubuntu-latest
    needs: [detect-changes, docker-scout]
    if: |
      (needs.detect-changes.outputs.search-service == 'true' ||
       needs.detect-changes.outputs.frontend-service == 'true') &&
      github.event_name == 'push' && 
      (github.ref == 'refs/heads/main' || github.ref == 'refs/heads/development' || github.ref == 'refs/heads/staging')
    
    strategy:
      fail-fast: false
      matrix:
        service:
          - search-service
          - frontend-service
    
    steps:
      - uses: actions/checkout@v4
      
      - name: Azure Login
        uses: azure/login@v2
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}
      
      - name: Login to Azure Container Registry
        uses: azure/docker-login@v1
        with:
          login-server: ${{ secrets.ACR_LOGIN_SERVER }}
          username: ${{ secrets.ACR_USERNAME }}
          password: ${{ secrets.ACR_PASSWORD }}
      
      - name: Download Docker image
        uses: actions/download-artifact@v4
        with:
          name: docker-${{ matrix.service }}
          path: /tmp
      
      - name: Load and tag Docker image
        run: |
          docker load < /tmp/${{ matrix.service }}.tar.gz
          
          # Determine environment from branch
          if [[ "${{ github.ref }}" == "refs/heads/main" ]]; then
            ENV="prd"
          elif [[ "${{ github.ref }}" == "refs/heads/staging" ]]; then
            ENV="staging"
          else
            ENV="dev"
          fi
          
          # Tag for ACR
          ACR_IMAGE="${{ secrets.ACR_LOGIN_SERVER }}/qnt9-srs/${{ matrix.service }}:${ENV}-${{ github.sha }}"
          ACR_IMAGE_LATEST="${{ secrets.ACR_LOGIN_SERVER }}/qnt9-srs/${{ matrix.service }}:${ENV}-latest"
          
          docker tag qnt9srs/${{ matrix.service }}:${{ github.ref_name }} $ACR_IMAGE
          docker tag qnt9srs/${{ matrix.service }}:${{ github.ref_name }} $ACR_IMAGE_LATEST
          
          # Push to ACR
          docker push $ACR_IMAGE
          docker push $ACR_IMAGE_LATEST
          
          echo "Pushed: $ACR_IMAGE"
          echo "Pushed: $ACR_IMAGE_LATEST"
      
      - name: Azure CLI - Verify image
        run: |
          ENV="${{ github.ref == 'refs/heads/main' && 'prd' || github.ref == 'refs/heads/staging' && 'staging' || 'dev' }}"
          az acr repository show-tags \
            --name $(echo "${{ secrets.ACR_LOGIN_SERVER }}" | cut -d'.' -f1) \
            --repository qnt9-srs/${{ matrix.service }} \
            --output table

  # Job 7: Summary and reporting
  summary:
    name: Pipeline Summary
    runs-on: ubuntu-latest
    needs: [detect-changes, lint, docker-build, test-in-docker, docker-scout]
    if: always()
    
    steps:
      - name: Download all artifacts
        uses: actions/download-artifact@v4
        with:
          path: artifacts
        continue-on-error: true
      
      - name: Upload test results to Codecov
        if: ${{ !cancelled() }}
        uses: codecov/test-results-action@v1
        with:
          token: ${{ secrets.CODECOV_TOKEN }}
        continue-on-error: true
      
      - name: Generate summary
        run: |
          echo "# Python CI Pipeline Summary" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**Branch:** \`${{ github.ref_name }}\`" >> $GITHUB_STEP_SUMMARY
          echo "**Commit:** \`${{ github.sha }}\`" >> $GITHUB_STEP_SUMMARY
          echo "**Triggered by:** ${{ github.event_name }}" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          
          echo "## Changed Services" >> $GITHUB_STEP_SUMMARY
          echo "- **search-service**: ${{ needs.detect-changes.outputs.search-service == 'true' && 'Changed' || 'Skipped' }}" >> $GITHUB_STEP_SUMMARY
          echo "- **frontend-service**: ${{ needs.detect-changes.outputs.frontend-service == 'true' && 'Changed' || 'Skipped' }}" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          
          echo "## Pipeline Stages" >> $GITHUB_STEP_SUMMARY
          echo "| Stage | Status |" >> $GITHUB_STEP_SUMMARY
          echo "|-------|--------|" >> $GITHUB_STEP_SUMMARY
          echo "| Lint & Format | ${{ needs.lint.result == 'success' && 'PASSED' || needs.lint.result == 'skipped' && 'SKIPPED' || 'FAILED' }} |" >> $GITHUB_STEP_SUMMARY
          echo "| Docker Build | ${{ needs.docker-build.result == 'success' && 'PASSED' || needs.docker-build.result == 'skipped' && 'SKIPPED' || 'FAILED' }} |" >> $GITHUB_STEP_SUMMARY
          echo "| Test in Docker | ${{ needs.test-in-docker.result == 'success' && 'PASSED' || needs.test-in-docker.result == 'skipped' && 'SKIPPED' || 'FAILED' }} |" >> $GITHUB_STEP_SUMMARY
          echo "| Security Scan | ${{ needs.docker-scout.result == 'success' && 'PASSED' || needs.docker-scout.result == 'skipped' && 'SKIPPED' || 'FAILED' }} |" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          
          if [[ "${{ needs.test-in-docker.result }}" == "success" ]]; then
            echo "### All tests passed with minimum 70% coverage requirement" >> $GITHUB_STEP_SUMMARY
          elif [[ "${{ needs.test-in-docker.result }}" == "skipped" ]]; then
            echo "### Tests skipped (no changes detected)" >> $GITHUB_STEP_SUMMARY
          else
            echo "### Some tests failed. Check the logs above." >> $GITHUB_STEP_SUMMARY
          fi
