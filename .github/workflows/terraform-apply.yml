name: "Terraform Apply"

on:
  push:
    branches:
      - develop
      - main
    paths:
      - 'infrastructure/terraform/**'
      - '.github/workflows/terraform-apply.yml'
  workflow_dispatch:
    inputs:
      environment:
        description: 'Environment to deploy'
        required: true
        type: choice
        options:
          - dev
          - staging
          - prd
      action:
        description: 'Terraform action'
        required: true
        type: choice
        options:
          - plan
          - apply
          - destroy

env:
  TF_VERSION: '1.5.0'
  CONFIG_DIRECTORY: "./infrastructure/terraform"
  ARM_CLIENT_ID: ${{ secrets.AZURE_CLIENT_ID }}
  ARM_CLIENT_SECRET: ${{ secrets.AZURE_CLIENT_SECRET }}
  ARM_SUBSCRIPTION_ID: ${{ secrets.AZURE_SUBSCRIPTION_ID }}
  ARM_TENANT_ID: ${{ secrets.AZURE_TENANT_ID }}

jobs:
  # Deploy to Development Environment (Fake Data)
  deploy-dev:
    name: Deploy - Development (Fake Data)
    runs-on: ubuntu-latest
    if: |
      (github.event_name == 'push' && github.ref == 'refs/heads/develop') ||
      (github.event_name == 'workflow_dispatch' && github.event.inputs.environment == 'dev' && github.event.inputs.action == 'apply')
    environment: 
      name: development
      url: https://dev.qnt9-srs.azure.com
    permissions:
      contents: read
      id-token: write
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: ${{ env.TF_VERSION }}

      - name: Azure Login
        uses: azure/login@v1
        with:
          creds: '{"clientId":"${{ secrets.AZURE_CLIENT_ID }}","clientSecret":"${{ secrets.AZURE_CLIENT_SECRET }}","subscriptionId":"${{ secrets.AZURE_SUBSCRIPTION_ID }}","tenantId":"${{ secrets.AZURE_TENANT_ID }}"}'

      - name: Terraform Init
        run: terraform init
        working-directory: ${{ env.CONFIG_DIRECTORY }}
        env:
          TF_VAR_vault_address: ${{ secrets.VAULT_ADDR }}
          TF_VAR_vault_token: ${{ secrets.VAULT_TOKEN }}
          TF_VAR_vault_namespace: ${{ secrets.VAULT_NAMESPACE }}

      - name: Terraform Apply - Dev
        run: terraform apply -var-file="environments/dev.tfvars" -auto-approve
        working-directory: ${{ env.CONFIG_DIRECTORY }}
        env:
          TF_VAR_vault_address: ${{ secrets.VAULT_ADDR }}
          TF_VAR_vault_token: ${{ secrets.VAULT_TOKEN }}
          TF_VAR_vault_namespace: ${{ secrets.VAULT_NAMESPACE }}

      - name: Get AKS Credentials
        run: |
          az aks get-credentials --resource-group rg-qnt9-srs-dev --name aks-qnt9-srs-dev --overwrite-existing

      - name: Deploy Fake Data Seeder
        run: |
          echo "Deploying fake data seeder to development environment..."
          # Add your fake data deployment logic here
          # kubectl apply -f k8s/dev/fake-data-seeder.yml

      - name: Verify Deployment
        run: |
          kubectl get nodes
          kubectl get pods --all-namespaces

  # Deploy to Staging/Test Environment (Pre-Prod Data + Azure Load Testing)
  deploy-staging:
    name: Deploy - Staging/Test (Pre-Prod Data)
    runs-on: ubuntu-latest
    if: |
      (github.event_name == 'push' && github.ref == 'refs/heads/main') ||
      (github.event_name == 'workflow_dispatch' && github.event.inputs.environment == 'staging' && github.event.inputs.action == 'apply')
    environment: 
      name: staging
      url: https://staging.qnt9-srs.azure.com
    permissions:
      contents: read
      id-token: write
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: ${{ env.TF_VERSION }}

      - name: Azure Login
        uses: azure/login@v1
        with:
          creds: '{"clientId":"${{ secrets.AZURE_CLIENT_ID }}","clientSecret":"${{ secrets.AZURE_CLIENT_SECRET }}","subscriptionId":"${{ secrets.AZURE_SUBSCRIPTION_ID }}","tenantId":"${{ secrets.AZURE_TENANT_ID }}"}'

      - name: Terraform Init
        run: terraform init
        working-directory: ${{ env.CONFIG_DIRECTORY }}
        env:
          TF_VAR_vault_address: ${{ secrets.VAULT_ADDR }}
          TF_VAR_vault_token: ${{ secrets.VAULT_TOKEN }}
          TF_VAR_vault_namespace: ${{ secrets.VAULT_NAMESPACE }}

      - name: Terraform Apply - Staging
        run: terraform apply -var-file="environments/staging.tfvars" -auto-approve
        working-directory: ${{ env.CONFIG_DIRECTORY }}
        env:
          TF_VAR_vault_address: ${{ secrets.VAULT_ADDR }}
          TF_VAR_vault_token: ${{ secrets.VAULT_TOKEN }}
          TF_VAR_vault_namespace: ${{ secrets.VAULT_NAMESPACE }}

      - name: Get AKS Credentials
        run: |
          az aks get-credentials --resource-group rg-qnt9-srs-staging --name aks-qnt9-srs-staging --overwrite-existing

      - name: Deploy Pre-Production Data
        run: |
          echo "Deploying pre-production data to staging environment..."
          # kubectl apply -f k8s/staging/preprod-data-seeder.yml

      - name: Wait for Services to be Ready
        run: |
          kubectl wait --for=condition=available --timeout=300s deployment --all -n default

      - name: Run Integration Tests
        run: |
          echo "Running integration tests..."
          # Add your integration test commands here

  # Deploy to Production Environment (Real Data)
  deploy-production:
    name: Deploy - Production (Real Data)
    runs-on: ubuntu-latest
    if: github.event_name == 'workflow_dispatch' && github.event.inputs.environment == 'prd' && github.event.inputs.action == 'apply'
    environment: 
      name: production
      url: https://qnt9-srs.azure.com
    permissions:
      contents: read
      id-token: write
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: ${{ env.TF_VERSION }}

      - name: Azure Login (Production Credentials)
        uses: azure/login@v1
        with:
          creds: '{"clientId":"${{ secrets.AZURE_CLIENT_ID_PRD }}","clientSecret":"${{ secrets.AZURE_CLIENT_SECRET_PRD }}","subscriptionId":"${{ secrets.AZURE_SUBSCRIPTION_ID_PRD }}","tenantId":"${{ secrets.AZURE_TENANT_ID_PRD }}"}'

      - name: Terraform Init
        run: terraform init
        working-directory: ${{ env.CONFIG_DIRECTORY }}
        env:
          TF_VAR_vault_address: ${{ secrets.VAULT_ADDR }}
          TF_VAR_vault_token: ${{ secrets.VAULT_TOKEN }}
          TF_VAR_vault_namespace: ${{ secrets.VAULT_NAMESPACE }}
          ARM_CLIENT_ID: ${{ secrets.AZURE_CLIENT_ID_PRD }}
          ARM_CLIENT_SECRET: ${{ secrets.AZURE_CLIENT_SECRET_PRD }}
          ARM_SUBSCRIPTION_ID: ${{ secrets.AZURE_SUBSCRIPTION_ID_PRD }}
          ARM_TENANT_ID: ${{ secrets.AZURE_TENANT_ID_PRD }}

      - name: Terraform Plan - Production
        run: terraform plan -var-file="environments/prd.tfvars" -out=tfplan-prd
        working-directory: ${{ env.CONFIG_DIRECTORY }}
        env:
          TF_VAR_vault_address: ${{ secrets.VAULT_ADDR }}
          TF_VAR_vault_token: ${{ secrets.VAULT_TOKEN }}
          TF_VAR_vault_namespace: ${{ secrets.VAULT_NAMESPACE }}
          ARM_CLIENT_ID: ${{ secrets.AZURE_CLIENT_ID_PRD }}
          ARM_CLIENT_SECRET: ${{ secrets.AZURE_CLIENT_SECRET_PRD }}
          ARM_SUBSCRIPTION_ID: ${{ secrets.AZURE_SUBSCRIPTION_ID_PRD }}
          ARM_TENANT_ID: ${{ secrets.AZURE_TENANT_ID_PRD }}

      - name: Terraform Apply - Production
        run: terraform apply tfplan-prd
        working-directory: ${{ env.CONFIG_DIRECTORY }}
        env:
          ARM_CLIENT_ID: ${{ secrets.AZURE_CLIENT_ID_PRD }}
          ARM_CLIENT_SECRET: ${{ secrets.AZURE_CLIENT_SECRET_PRD }}
          ARM_SUBSCRIPTION_ID: ${{ secrets.AZURE_SUBSCRIPTION_ID_PRD }}
          ARM_TENANT_ID: ${{ secrets.AZURE_TENANT_ID_PRD }}

      - name: Get AKS Credentials
        run: |
          az aks get-credentials --resource-group rg-qnt9-srs-prd --name aks-qnt9-srs-prd --overwrite-existing
        env:
          ARM_CLIENT_ID: ${{ secrets.AZURE_CLIENT_ID_PRD }}
          ARM_CLIENT_SECRET: ${{ secrets.AZURE_CLIENT_SECRET_PRD }}
          ARM_SUBSCRIPTION_ID: ${{ secrets.AZURE_SUBSCRIPTION_ID_PRD }}
          ARM_TENANT_ID: ${{ secrets.AZURE_TENANT_ID_PRD }}

      - name: Blue-Green Deployment Strategy
        run: |
          echo "Implementing blue-green deployment for production..."
          # Add your blue-green deployment logic here
          # kubectl apply -f k8s/prd/blue-green-deployment.yml

      - name: Health Check
        run: |
          echo "Running production health checks..."
          # Add your health check commands here

      - name: Notify Deployment Success
        if: success()
        run: |
          echo "Production deployment successful!"
          # Add notification logic (Slack, Teams, etc.)

      - name: Rollback on Failure
        if: failure()
        run: |
          echo "Deployment failed. Initiating rollback..."
          # Add rollback logic here